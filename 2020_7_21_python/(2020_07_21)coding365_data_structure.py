# -*- coding: utf-8 -*-
"""(2020_07_21)Coding365_Data_Structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1graiaI9QblwyRzfJaL1FmJQerykyYdkq

#**Python Data Structure**

#**Data Types**

##**Numeric Data Types**
"""

#Integer
num=10
print(num,' Data Type：',type(num))
print(int(7/2))
print()

#Float
float1=10.0
print(float1,' Data Type：',type(float1))
print()

#Boolean
bool=False
print(bool,' Data Type：',type(bool))

"""##**String Data Types**

![alt text](http://kevin.hwai.edu.tw/~kevin/material/JAVA/Sample2016/ASCII.gif)
"""

#String
print('String:')
str1='Hello'
str2="Hello"
print('str1 Data type:',type(str1))
print('1:',"str1 is as same as str2?",str1==str2) #("") is as same as ('')
print('2:',"Hi\n",str2)  #(\n) can switch to the next line
print('3:',"Hi\t",str1)  #(\t) = tab on keyboard 
print('4:','I\'m a supergirl.') #(I\'m) = I'm
print()

#Character 
print('character:')
b=66
print(b,'in char is',chr(70))

"""##**Container Types**"""

#List
print('List:')
list1=[1,3,5,7,9,2,4,6,8,1]
print('list1:',list1)
print('list1 Data Type:',type(list1))
list1.append(10) #add 10 to list1's tail
print('list1:',list1) 
list1.extend([11,999])  #add the element in [] to list1's tail
print('list1:',list1)
print('list1:',list1.count(1)) #count 1 of times in list1
list1.insert(1,2) #add 2 to the location of list1[1] 
print('list1:',list1)
list1.remove(11) #remove 11 in list1
print('list1:',list1)
list1.reverse() #reverse list1
print('list1:',list1)
print()

#Tuple
print('Tuple:')
tuple1=(1,3,5,7)
print(tuple1,'tuple1 data type:',type(tuple1))
print(tuple1[1:])
print()

#Set
print('Set:')
A={'A','B','C'}
B={'B','C','D'}
C={'A','A','B'}
print('A:',A,' B:',B)
print('A Data Type:',type(A))
print('C:',C)
print('B' in A) #existed?
print('C' not in B) #not existed?
print(A & B)  #and
print(A | B)  #or
print(A - B)  #sub
print(A ^ B)  #XOR
print(A > B)  #B belongs in A
print(A < B)  #A belongs in B
print()

#Dictionary
print('Dictionary:')
data={'Wang':12309,'Lin':10126}
print(data['Wang'])
data['cheng'] = 30335
print(data)
del data['cheng']
print(data)
print(data.items())
print(data.keys())
print(data.values())

"""#**Algorithm**

##**Insertion Sort**
"""

#Insertion sort
A = [5 ,2, 4, 6, 1, 3]
print(A)
for i in range(1, len(A)):  #The first element is setted.Starting from thhe second element
  data = A[i]     #data is an inserted data
  j = i - 1       #The number of fixed element
  while j >= 0 and A[j] > data :
    A[j + 1] = A[j]     #data is moved to right.
    j = j - 1
    A[ j + 1 ] = data
  print("step", i, ": ", A)

"""##**Bubble Sort**"""

#Bubble Sort
A = [7,6,4,1,3]
print(A)

for i in range(len(A)):
  count=0
  for j in range(0,len(A)-i-1):
    if A[j] > A[j+1]:
      a = A[j]
      A[j]=A[j+1]
      A[j+1]=a
      count=1
      print(A)
  if count == 1:
    print('step',i+1,':',A)
  else:
    exit

"""#**Practice**

A = [3,7,1,2,5,9],please remove 5 and add 6 and use insertion sort to print it
"""

A=[3,7,1,2,5,9]
A.remove(5)
A.append(6)
print(A)
for i in range(1, len(A)):  #The first element is setted.Starting from thhe second element
  data = A[i]     #data is an inserted data
  j = i - 1       #The number of fixed element
  while j >= 0 and A[j] > data :
    A[j + 1] = A[j]     #data is moved to right.
    j = j - 1
    A[ j + 1 ] = data
  print("step", i, ": ", A)

"""A = {1,2,3,4,5,6} B = {3,6},try to print (A or B),(A and B),(A - B),(B belongs to A?)"""

A={1,2,3,4,5,6}
B={3,6}
print(type(A))
print("A or B = ",A | B)  #and
print("A and B = ",A & B)  #or
print("A - B = ",A - B)  #sub
print("B belongs to A? ",A > B)  #B belongs in A

"""## Please"""

A=[3,1,8,7,45,11,22,6,87,4,59,36,46,44] 
count = 0
for i in range(0, len(A)-1):
  for j in range(i+1, len(A)):
    if A[j] < A[i]:
      b=A[j]
      A[j]=A[i]
      A[i]=b
      count +=1
      print(count," step",A)
A=tuple(A)
print(A,type(A))