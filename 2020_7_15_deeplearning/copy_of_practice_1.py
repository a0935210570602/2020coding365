# -*- coding: utf-8 -*-
"""Copy of Practice_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I4VBfEtjAGQipPAwNv6Nb-wrF60083Ai
"""

import csv
# read data
notStressed=[]
stressed=[]

with open('./notStressed_data.txt','r')as f:
    notStressed_data = csv.reader(f, delimiter='\t')
    for row in notStressed_data:
        notStressed.append((float(row[0]),float(row[1]),0))

with open('./Stressed_data.txt','r')as f:
    Stressed_data = csv.reader(f, delimiter='\t')
    for row in Stressed_data:
        stressed.append((float(row[0]),float(row[1]),1))
        
print (notStressed[:5])
print (stressed[:5])

import matplotlib.pyplot as plt
plt.ylabel("husband annual incomes ($100,000 units)")
plt.xlabel("wife annual incomes ($100,000 units)")
#plot not stressed class
plt.scatter([each[0] for each in notStressed], [each[1] for each in notStressed], c = "red", label = "not stressed")
#plot stressed
plt.scatter([each[0] for each in stressed], [each[1] for each in stressed], c = "blue", label = "stressed")
plt.legend()
plt.show()

# split training data (99 not stressed + 100 stressed) and testing data (100 not stressed + 100 stressed)

import random
print(notStressed[0:5])
random.shuffle(notStressed)
print(notStressed[0:5])

random.shuffle(stressed)
trainingList = notStressed[:99] + stressed[:100]
testingList = notStressed[99:199] + stressed[100:]
print("testingList\n\n",testingList)
plt.title("training data")
plt.xlabel("husband annual incomes ($100,000 units)")
plt.ylabel("wife annual incomes ($100,000 units)")
plt.scatter([each[0] for each in trainingList[:99]], [each[1] for each in trainingList[:99]], c = "red", label = "not stressed")
plt.scatter([each[0] for each in trainingList[99:]], [each[1] for each in trainingList[99:]], c = "blue", label = "stressed")
plt.legend()
plt.figure()
plt.title("testing data")
plt.xlabel("husband annual incomes ($100,000 units)")
plt.ylabel("wife annual incomes ($100,000 units)")
plt.scatter([each[0] for each in testingList[:100]], [each[1] for each in testingList[:100]], c = "red", label = "not stressed")
plt.scatter([each[0] for each in testingList[100:]], [each[1] for each in testingList[100:]], c = "blue", label = "stressed")
plt.legend()
plt.show()

import math

print("training data list",trainingList[0:3],"...")
print("testing data list",testingList[0:3],"...")

# 計算第一群 x mean, y mean 、第二群的 x_mean, y_mean

notStressed_data_x_means = 0
notStressed_data_y_means = 0
Stressed_data_x_means = 0
Stressed_data_y_means = 0
mount = 0
for i in notStressed:
    if mount>=99:
        break
    notStressed_data_x_means += i[0]
    notStressed_data_y_means += i[1]
    mount += 1
mount = 0
for i in stressed:
    if mount>=100:
        break
    Stressed_data_x_means += i[0]
    Stressed_data_y_means += i[1]
    mount += 1

notStressed_data_x_means /= 99
notStressed_data_y_means /= 99
Stressed_data_x_means /= 100
Stressed_data_y_means /= 100
print("第一群 x mean: ",notStressed_data_x_means)
print("第一群 y mean: ",notStressed_data_y_means)
print("第二群 x mean: ",Stressed_data_x_means)
print("第二群 y mean: ",Stressed_data_y_means)

# 計算 testing data 跟兩群 x_mean,y_mean 的距離
# 比較距離，決定該資料屬於哪一群

with_notStressed_distance = 0
with_Stressed_distance = 0
count = 1
for i in testingList:
    x = (notStressed_data_x_means - i[0]) **2
    y = (notStressed_data_y_means - i[1]) **2
    xx = (Stressed_data_x_means - i[0]) **2
    yy = (Stressed_data_y_means - i[1]) **2

    print("\n第",count,"筆資料和notStressed_data的距離: ", (x+y)**(1/2) )
    print("第",count,"筆資料和Stressed_data的距離: ", (xx+yy)**(1/2))
    if (x+y)**(1/2) >= (xx+yy)**(1/2):
        print("第",count,"筆資料屬於notStressed_data")
    else:
        print("第",count,"筆資料屬於Stressed_data")

    count += 1